(function(e,i,n,t){'use strict';t.quickedit.EntityModel=t.quickedit.BaseModel.extend({defaults:{el:null,entityID:null,entityInstanceID:null,id:null,label:null,fields:null,isActive:!1,inTempStore:!1,isDirty:!1,isCommitting:!1,state:'closed',fieldsInTempStore:[],reload:!1},initialize:function(){this.set('fields',new t.quickedit.FieldCollection());this.listenTo(this,'change:state',this.stateChange);this.listenTo(this.get('fields'),'change:state',this.fieldStateChange);t.quickedit.BaseModel.prototype.initialize.call(this)},stateChange:function(i,s,n){var c=s;switch(c){case'closed':this.set({isActive:!1,inTempStore:!1,isDirty:!1});break;case'launching':break;case'opening':i.get('fields').each(function(e){e.set('state','candidate',n)});break;case'opened':this.set('isActive',!0);break;case'committing':var a=this.get('fields');a.chain().filter(function(t){return e.intersection([t.get('state')],['active']).length}).each(function(e){e.set('state','candidate')});a.chain().filter(function(i){return e.intersection([i.get('state')],t.quickedit.app.changedFieldStates).length}).each(function(e){e.set('state','saving')});break;case'deactivating':var r=this.get('fields').filter(function(t){return e.intersection([t.get('state')],['changed','invalid']).length});if((r.length||this.get('fieldsInTempStore').length)&&(!n.saved&&!n.confirmed)){this.set('state','opened',{confirming:!0});e.defer(function(){t.quickedit.app.confirmEntityDeactivation(i)})}
else{var o=this.get('fields').filter(function(t){return e.intersection([t.get('state')],['invalid']).length});i.set('reload',(this.get('fieldsInTempStore').length||o.length));i.get('fields').each(function(t){if(e.intersection([t.get('state')],['candidate','highlighted']).length){t.trigger('change:state',t,t.get('state'),n)}
else{t.set('state','candidate',n)}})};break;case'closing':n.reason='stop';this.get('fields').each(function(e){e.set({inTempStore:!1,state:'inactive'},n)});break}},_updateInTempStoreAttributes:function(t,i){var s=i.get('state'),a=i.previous('state'),n=t.get('fieldsInTempStore');if(s==='saved'){t.set('inTempStore',!0);i.set('inTempStore',!0);n.push(i.get('fieldID'));n=e.uniq(n);t.set('fieldsInTempStore',n)}
else if(s==='candidate'&&a==='inactive'){i.set('inTempStore',e.intersection([i.get('fieldID')],n).length>0)}},fieldStateChange:function(i,s){var n=this,a=s;switch(this.get('state')){case'closed':case'launching':break;case'opening':e.defer(function(){n.set('state','opened',{'accept-field-states':t.quickedit.app.readyFieldStates})});break;case'opened':if(a==='changed'){n.set('isDirty',!0)}
else{this._updateInTempStoreAttributes(n,i)};break;case'committing':if(a==='invalid'){e.defer(function(){n.set('state','opened',{reason:'invalid'})})}
else{this._updateInTempStoreAttributes(n,i)};var c={'accept-field-states':t.quickedit.app.readyFieldStates};if(n.set('isCommitting',!0,c)){n.save({success:function(){n.set({state:'deactivating',isCommitting:!1},{saved:!0})},error:function(){n.set('isCommitting',!1);n.set('state','opened',{reason:'networkerror'});var e=t.t('Your changes to <q>@entity-title</q> could not be saved, either due to a website problem or a network connection problem.<br>Please try again.',{'@entity-title':n.get('label')});t.quickedit.util.networkErrorModal(t.t('Network problem!'),e)}})};break;case'deactivating':e.defer(function(){n.set('state','closing',{'accept-field-states':t.quickedit.app.readyFieldStates})});break;case'closing':e.defer(function(){n.set('state','closed',{'accept-field-states':['inactive']})});break}},save:function(e){var i=this,n=t.ajax({url:t.url('quickedit/entity/'+i.get('entityID')),error:function(){e.error.call(i)}});n.commands.quickeditEntitySaved=function(t,n,s){i.get('fields').each(function(e){e.set('inTempStore',!1)});i.set('inTempStore',!1);i.set('fieldsInTempStore',[]);if(e.success){e.success.call(i)}};n.execute()},validate:function(t,i){var o=i['accept-field-states']||[],s=this.get('state'),n=t.state;if(s!==n){if(e.indexOf(this.constructor.states,n)===-1){return'"'+n+'" is an invalid state'};if(!this._acceptStateChange(s,n,i)){return'state change not accepted'}
else if(!this._fieldsHaveAcceptableStates(o)){return'state change not accepted because fields are not in acceptable state'}};var c=this.get('isCommitting'),a=t.isCommitting;if(c===!1&&a===!0){if(!this._fieldsHaveAcceptableStates(o)){return'isCommitting change not accepted because fields are not in acceptable state'}}
else if(c===!0&&a===!0){return'isCommitting is a mutex, hence only changes are allowed'}},_acceptStateChange:function(e,t,i){var n=!0;if(!this.constructor.followsStateSequence(e,t)){n=!1;if(e==='closing'&&t==='closed'){n=!0}
else if(e==='committing'&&t==='opened'&&i.reason&&(i.reason==='invalid'||i.reason==='networkerror')){n=!0}
else if(e==='deactivating'&&t==='opened'&&i.confirming){n=!0}
else if(e==='opened'&&t==='deactivating'&&i.confirmed){n=!0}};return n},_fieldsHaveAcceptableStates:function(t){var i=!0;if(t.length>0){var n=this.get('fields').pluck('state')||[];if(e.difference(n,t).length){i=!1}};return i},destroy:function(e){t.quickedit.BaseModel.prototype.destroy.call(this,e);this.stopListening();this.get('fields').reset()},sync:function(){return}},{states:['closed','launching','opening','opened','committing','deactivating','closing'],followsStateSequence:function(t,i){return e.indexOf(this.states,t)<e.indexOf(this.states,i)}});t.quickedit.EntityCollection=n.Collection.extend({model:t.quickedit.EntityModel})}(_,jQuery,Backbone,Drupal));