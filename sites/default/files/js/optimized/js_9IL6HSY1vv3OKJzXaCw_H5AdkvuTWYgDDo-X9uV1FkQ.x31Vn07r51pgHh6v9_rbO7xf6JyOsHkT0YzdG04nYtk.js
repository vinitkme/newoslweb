(function(e,i,n){'use strict';i.behaviors.fieldUIFieldStorageAddForm={attach:function(i){var t=e(i).find('[data-drupal-selector="field-ui-field-storage-add-form"]').once('field_ui_add');if(t.length){t.find('.js-form-item-label label,.js-form-item-field-name label,.js-form-item-existing-storage-label label').addClass('js-form-required form-required');var r=t.find('select[name="new_storage_type"]'),a=t.find('select[name="existing_storage_name"]'),l=t.find('input[name="existing_storage_label"]');r.on('change',function(){if(e(this).val()!==''){a.val('').trigger('change')}});a.on('change',function(){var i=e(this).val();if(i!==''){r.val('').trigger('change');if(typeof n.existingFieldLabels[i]!=='undefined'){l.val(n.existingFieldLabels[i])}}})}}};i.behaviors.fieldUIDisplayOverview={attach:function(n,t){e(n).find('table#field-display-overview').once('field-display-overview').each(function(){i.fieldUIOverview.attach(this,t.fieldUIRowsData,i.fieldUIDisplayOverview)})}};i.fieldUIOverview={attach:function(n,t,r){var a=i.tableDrag[n.id];a.onDrop=this.onDrop;a.row.prototype.onSwap=this.onSwap;e(n).find('tr.draggable').each(function(){var i=this;if(i.id in t){var n=t[i.id];n.tableDrag=a;var l=new r[n.rowHandler](i,n);e(i).data('fieldUIRowHandler',l)}})},onChange:function(){var l=e(this),r=l.closest('tr'),n=r.data('fieldUIRowHandler'),a={};a[n.name]=l.get(0);var t=n.getRegion();if(t!==n.region){r.find('select.js-field-parent').val('');e.extend(a,n.regionChange(t));n.region=t};i.fieldUIOverview.AJAXRefreshRows(a)},onDrop:function(){var l=this,r=l.rowObject.element,a=e(r),n=a.data('fieldUIRowHandler');if(typeof n!=='undefined'){var o=a.prevAll('tr.region-message').get(0),t=o.className.replace(/([^ ]+[ ]+)*region-([^ ]+)-message([ ]+[^ ]+)*/,'$2');if(t!==n.region){var s=n.regionChange(t);n.region=t;i.fieldUIOverview.AJAXRefreshRows(s)}}},onSwap:function(i){var n=this;e(n.table).find('tr.region-message').each(function(){var i=e(this);if(i.prev('tr').get(0)===n.group[n.group.length-1]){if((n.method!=='keyboard'||n.direction==='down')){n.swap('after',this)}};if(i.next('tr').is(':not(.draggable)')||i.next('tr').length===0){i.removeClass('region-populated').addClass('region-empty')}
else if(i.is('.region-empty')){i.removeClass('region-empty').addClass('region-populated')}})},AJAXRefreshRows:function(i){var t=[],a=[],n;for(n in i){if(i.hasOwnProperty(n)){t.push(n);a.push(i[n])}};if(t.length){e(a).after('<div class="ajax-progress ajax-progress-throbber"><div class="throbber">&nbsp;</div></div>');e('input[name=refresh_rows]').val(t.join(' '));e('input[data-drupal-selector="edit-refresh"]').trigger('mousedown');e(a).prop('disabled',!0)}}};i.fieldUIDisplayOverview={};i.fieldUIDisplayOverview.field=function(n,t){this.row=n;this.name=t.name;this.region=t.region;this.tableDrag=t.tableDrag;this.$pluginSelect=e(n).find('select.field-plugin-type');this.$pluginSelect.on('change',i.fieldUIOverview.onChange);return this};i.fieldUIDisplayOverview.field.prototype={getRegion:function(){return(this.$pluginSelect.val()==='hidden')?'hidden':'content'},regionChange:function(e){var t=this.$pluginSelect.val(),i;if(e==='content'){if(t==='hidden'){i=(typeof this.defaultPlugin!=='undefined')?this.defaultPlugin:this.$pluginSelect.find('option').val()}}
else{i='hidden'};if(typeof i!=='undefined'){this.$pluginSelect.val(i)};var n={};n[this.name]=this.$pluginSelect.get(0);return n}}})(jQuery,Drupal,drupalSettings);